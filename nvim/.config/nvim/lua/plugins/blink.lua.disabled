return {
  {
    'saghen/blink.compat',
    -- use the latest release, via version = '*', if you also use the latest release for blink.cmp
    version = '*',
    -- lazy.nvim will automatically load the plugin when it's required by blink.cmp
    lazy = true,
    -- make sure to set opts so that lazy.nvim calls blink.compat's setup
    opts = {},
  },
  {
    'saghen/blink.cmp',
    version = '*',

    -- dependencies = {
      --   "fang2hou/blink-copilot"
      -- },

      ---@module 'blink.cmp'
      ---@type blink.cmp.Config
      opts = {
        completion = {
          menu = { draw = { columns = { { "kind_icon" }, { "label", "label_description", gap = 1 }, { "kind" } } } },
          keyword = { range = 'prefix' },
          list = { selection = { preselect = true, auto_insert = true } },
          documentation = { auto_show = true, auto_show_delay_ms = 100 },
          ghost_text = { enabled = true },
        },

        signature = { enabled = true },

        keymap = {
          preset = 'none',
          ['<C-space>'] = { 'show', 'show_documentation', 'hide_documentation' },
          ['<C-e>'] = { 'hide' },
          ['<C-f>'] = { 'select_and_accept', 'fallback' },

          ['<C-p>'] = { 'select_prev', 'fallback' },
          ['<C-n>'] = { 'select_next', 'fallback' },

          ['<C-u>'] = { 'scroll_documentation_up', 'fallback' },
          ['<C-d>'] = { 'scroll_documentation_down', 'fallback' },

          -- ['<Tab>'] = { 'snippet_forward', 'fallback' },
          ['<Tab>'] = {
            function(cmp)
              if cmp.snippet_active() then return cmp.accept()
              else return cmp.select_and_accept() end
            end,
            'snippet_forward',
            'fallback'
          },
          ['<S-Tab>'] = { 'snippet_backward', 'fallback' },

          -- ['<CR>'] = {
            --   function(cmp)
              --     if not cmp.is_visible() then return end
              --
              --     local completion_list = require('blink.cmp.completion.list')
              --     if completion_list.selected_item_idx then
              --       cmp.select_and_accept()
              --       return true
              --     else
              --       return false
              --     end
              --   end, 'fallback' },
              -- ['<C-k>'] = { 'show_signature', 'hide_signature', 'fallback' },
            },

            appearance = {
              -- use_nvim_cmp_as_default = true,
              nerd_font_variant = 'mono' -- Set to 'mono' for 'Nerd Font Mono' or 'normal' for 'Nerd Font'
            },

            -- Default list of enabled providers defined so that you can extend it
            -- elsewhere in your config, without redefining it, due to `opts_extend`
            sources = {
              default = {
                -- 'copilot',
                'lsp',
                'path',
                'snippets',
                'buffer',
                "avante_commands",
                "avante_mentions",
                "avante_files"
              },
              providers = {
                -- copilot = {
                  --   name = "copilot",
                  --   module = 'blink-copilot',
                  --   score_offset = 100,
                  --   async = true,
                  -- },
                  avante_commands = {
                    name = "avante_commands",
                    module = "blink.compat.source",
                    score_offset = 90, -- show at a higher priority than lsp
                    opts = {},
                  },
                  avante_files = {
                    name = "avante_files",
                    module = "blink.compat.source",
                    score_offset = 100, -- show at a higher priority than lsp
                    opts = {},
                  },
                  avante_mentions = {
                    name = "avante_mentions",
                    module = "blink.compat.source",
                    score_offset = 1000, -- show at a higher priority than lsp
                    opts = {},
                  }
                },
              },
            },
            opts_extend = { "sources.default" }
          }
        }
